{
  "createdAt": "2025-08-22T05:37:47.253Z",
  "updatedAt": "2025-08-22T08:09:59.000Z",
  "id": "SO2Vti0TEOkQlTPl",
  "name": "Course Translation Workflow v1",
  "active": false,
  "isArchived": true,
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "translate-course",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "0a5d6bf9-3b8b-46aa-a036-f36f751b3219",
      "name": "Course Translation Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -1056,
        384
      ],
      "webhookId": "course-translation",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "// Validate input parameters\nconst items = $input.all();\nconst payload = items[0].json.body || items[0].json;\n\n// Initialize status tracking\nconst status = {\n  status: 'processing',\n  course_id: payload.course_id || null,\n  processed_tables: [],\n  errors: [],\n  log: 'Starting course translation'\n};\n\n// Validate required fields\nif (!payload.course_id) {\n  status.status = 'error';\n  status.errors.push({\n    table_name: 'validation',\n    row_id: null,\n    error_type: 'missing_parameter',\n    message: 'course_id is required'\n  });\n}\n\nif (!payload.source_language) {\n  status.status = 'error';\n  status.errors.push({\n    table_name: 'validation',\n    row_id: null,\n    error_type: 'missing_parameter',\n    message: 'source_language is required'\n  });\n}\n\nif (!payload.target_language) {\n  status.status = 'error';\n  status.errors.push({\n    table_name: 'validation',\n    row_id: null,\n    error_type: 'missing_parameter',\n    message: 'target_language is required'\n  });\n}\n\n// Language validation (basic ISO code check)\nconst validLanguages = ['da', 'en', 'de', 'fr', 'es', 'it', 'nl', 'sv', 'no'];\nif (payload.source_language && !validLanguages.includes(payload.source_language)) {\n  status.status = 'error';\n  status.errors.push({\n    table_name: 'validation',\n    row_id: null,\n    error_type: 'invalid_parameter',\n    message: `Invalid source_language: ${payload.source_language}`\n  });\n}\n\nif (payload.target_language && !validLanguages.includes(payload.target_language)) {\n  status.status = 'error';\n  status.errors.push({\n    table_name: 'validation',\n    row_id: null,\n    error_type: 'invalid_parameter',\n    message: `Invalid target_language: ${payload.target_language}`\n  });\n}\n\n// Return enriched data\nreturn [{\n  json: {\n    ...payload,\n    status: status,\n    translation_context: {\n      course_id: payload.course_id,\n      source_language: payload.source_language,\n      target_language: payload.target_language\n    }\n  }\n}];"
      },
      "id": "a713eae5-f471-44aa-a428-e0e4803032c2",
      "name": "Validate Input",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -832,
        384
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "error-check",
              "leftValue": "={{ $json.status.status }}",
              "rightValue": "error",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "4440cfc5-4a1f-44b3-a4f4-7665112690df",
      "name": "Check Validation",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -608,
        384
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n  c.id,\n  ct.title,\n  ct.description,\n  ct.learning_objectives\nFROM courses c\nJOIN course_translations ct ON c.id = ct.course_id\nWHERE c.id = '{{ $json.course_id }}' AND ct.language_code = '{{ $json.source_language }}'\nLIMIT 1",
        "options": {}
      },
      "id": "fd296cb3-0c83-479a-9337-ca424af8e17d",
      "name": "Fetch Course Context",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -384,
        96
      ],
      "retryOnFail": true,
      "credentials": {
        "postgres": {
          "id": "RUVxlMmZvsZC2IGe",
          "name": "Postgres account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n  id,\n  course_id,\n  language_code,\n  title,\n  description,\n  learning_objectives\nFROM course_translations\nWHERE course_id = '{{ $json.course_id }}' AND language_code = '{{ $json.source_language }}'",
        "options": {}
      },
      "id": "08018fe1-51ef-4694-aea7-065007b78b9d",
      "name": "Fetch Course Translations",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -384,
        -96
      ],
      "retryOnFail": true,
      "credentials": {
        "postgres": {
          "id": "RUVxlMmZvsZC2IGe",
          "name": "Postgres account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n  mt.id,\n  mt.module_id,\n  mt.language_code,\n  mt.title,\n  mt.description\nFROM module_translations mt\nJOIN modules m ON mt.module_id = m.id\nWHERE m.course_id = '{{ $json.course_id }}' AND mt.language_code = '{{ $json.source_language }}'\nORDER BY m.position",
        "options": {}
      },
      "id": "3ef1811e-2b3f-4035-88b0-74a4e060b0b4",
      "name": "Fetch Module Translations",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -384,
        288
      ],
      "retryOnFail": true,
      "credentials": {
        "postgres": {
          "id": "RUVxlMmZvsZC2IGe",
          "name": "Postgres account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n  lt.id,\n  lt.lesson_id,\n  lt.language_code,\n  lt.title,\n  lt.content\nFROM lesson_translations lt\nJOIN lessons l ON lt.lesson_id = l.id\nJOIN modules m ON l.module_id = m.id\nWHERE m.course_id = '{{ $json.course_id }}' AND lt.language_code = '{{ $json.source_language }}'\nORDER BY m.position, l.position",
        "options": {}
      },
      "id": "080d5bc4-97eb-4dd8-9514-dfdc55e13bbf",
      "name": "Fetch Lesson Translations",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -384,
        480
      ],
      "retryOnFail": true,
      "credentials": {
        "postgres": {
          "id": "RUVxlMmZvsZC2IGe",
          "name": "Postgres account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n  qt.id,\n  qt.module_question_id,\n  qt.language_code,\n  qt.question_text,\n  array_agg(\n    json_build_object(\n      'id', ot.module_question_option_id,\n      'option_text', ot.option_text\n    ) ORDER BY mo.position\n  ) as options\nFROM module_question_translations qt\nJOIN module_questions mq ON qt.module_question_id = mq.id\nJOIN modules m ON mq.module_id = m.id\nJOIN module_question_options mo ON mq.id = mo.module_question_id\nJOIN module_question_option_translations ot ON mo.id = ot.module_question_option_id AND ot.language_code = qt.language_code\nWHERE m.course_id = '{{ $json.course_id }}' AND qt.language_code = '{{ $json.source_language }}'\nGROUP BY qt.id, qt.module_question_id, qt.language_code, qt.question_text\nORDER BY mq.position",
        "options": {}
      },
      "id": "b65958a0-55a2-4abe-a8ee-3b1120577038",
      "name": "Fetch Questions with Options",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -384,
        864
      ],
      "retryOnFail": true,
      "credentials": {
        "postgres": {
          "id": "RUVxlMmZvsZC2IGe",
          "name": "Postgres account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "// Merge all fetched data and prepare for translation\nconst items = $input.all();\n\n// Get data from all parallel executions\nconst courseContext = items.find(i => i.json.title !== undefined) || {};\nconst courseData = items.filter(i => i.json.course_id !== undefined && i.json.title !== undefined);\nconst moduleData = items.filter(i => i.json.module_id !== undefined);\nconst lessonData = items.filter(i => i.json.lesson_id !== undefined);\nconst questionData = items.filter(i => i.json.module_question_id !== undefined && i.json.question_text !== undefined);\n\n// Get translation parameters from validation node\nconst validationData = items[0]?.json || {};\nconst translationContext = {\n  course_id: validationData.course_id,\n  source_language: validationData.source_language,\n  target_language: validationData.target_language\n};\n\n// Prepare consolidated translation data\nconst translationJobs = [];\n\n// Add course translations\nif (courseData.length > 0) {\n  translationJobs.push({\n    table_name: 'course_translations',\n    items: courseData.map(item => item.json),\n    context_type: 'course',\n    translation_context: translationContext\n  });\n}\n\n// Add module translations\nif (moduleData.length > 0) {\n  translationJobs.push({\n    table_name: 'module_translations',\n    items: moduleData.map(item => item.json),\n    context_type: 'module',\n    translation_context: translationContext\n  });\n}\n\n// Add lesson translations\nif (lessonData.length > 0) {\n  translationJobs.push({\n    table_name: 'lesson_translations',\n    items: lessonData.map(item => item.json),\n    context_type: 'lesson',\n    translation_context: translationContext\n  });\n}\n\n// Add question+option translations (grouped)\nif (questionData.length > 0) {\n  translationJobs.push({\n    table_name: 'module_question_translations',\n    items: questionData.map(item => item.json),\n    context_type: 'question_with_options',\n    translation_context: translationContext\n  });\n}\n\n// Return prepared data as array for split node\nif (translationJobs.length === 0) {\n  // No data to translate\n  return [{\n    json: {\n      translation_context: translationContext,\n      course_context: courseContext,\n      translation_jobs: [],\n      status: {\n        status: 'error',\n        errors: [{\n          message: 'No source data found for translation'\n        }],\n        log: 'No data available to translate'\n      }\n    }\n  }];\n}\n\n// Return each job as separate item\nreturn translationJobs.map(job => ({\n  json: job\n}));"
      },
      "id": "ca54dc28-de33-4fd0-95d9-ac71280d1ae4",
      "name": "Merge Translation Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -160,
        96
      ]
    },
    {
      "parameters": {
        "batchSize": 5,
        "options": {
          "reset": false
        }
      },
      "id": "9e00077f-0790-4d31-bbf0-f5717c30de55",
      "name": "Split Items in Batches",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        64,
        96
      ]
    },
    {
      "parameters": {
        "resource": "chat",
        "prompt": {
          "messages": [
            {
              "role": "system",
              "content": "=You are a professional course translation assistant. Translate educational content while maintaining the tone, style, and educational value.\n\nTranslation Guidelines:\n- Preserve all educational terminology accurately\n- Maintain the same level of formality and engagement\n- Keep technical terms consistent\n- Ensure learning objectives remain clear and actionable\n- For questions and answers, maintain the logical structure and ensure correct answers remain correct\n\nSource Language: {{ $('Validate Input').item.json.source_language }}\nTarget Language: {{ $('Validate Input').item.json.target_language }}\n\nYou will receive content to translate. Return ONLY the translated content in valid JSON format matching the input structure exactly."
            },
            {
              "content": "=Translate this {{ $json.context_type }} content:\n\n{{ JSON.stringify($json.items, null, 2) }}\n\nReturn the translated content in the exact same JSON structure, but with all text fields translated to {{ $json.translation_context.target_language }}."
            }
          ]
        },
        "options": {
          "maxTokens": 2000,
          "temperature": 0.3
        },
        "requestOptions": {}
      },
      "id": "c5f8c9e1-8493-4410-9695-34f940f2ebf4",
      "name": "Translate Content",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1.1,
      "position": [
        560,
        -32
      ],
      "credentials": {
        "openAiApi": {
          "id": "Gvr9qL4I7djxEhHC",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Process translated content and prepare for database update\nconst items = $input.all();\nconst currentItem = items[0].json;\n\n// Parse AI response\nlet translatedContent;\ntry {\n  const aiResponse = currentItem.choices[0].message.content;\n  // Try to extract JSON from the response\n  const jsonMatch = aiResponse.match(/```json\\s*([\\s\\S]*?)\\s*```/) || \n                   aiResponse.match(/```\\s*([\\s\\S]*?)\\s*```/) ||\n                   [null, aiResponse];\n  \n  translatedContent = JSON.parse(jsonMatch[1] || aiResponse);\n} catch (error) {\n  // If parsing fails, return error\n  return [{\n    json: {\n      error: {\n        table_name: currentItem.table_name,\n        error_type: 'translation_parse_error',\n        message: `Failed to parse translation response: ${error.message}`,\n        raw_response: currentItem.choices?.[0]?.message?.content || 'No response'\n      }\n    }\n  }];\n}\n\n// Prepare database updates based on table type\nconst updates = [];\nconst tableName = currentItem.table_name;\nconst targetLanguage = currentItem.translation_context.target_language;\n\nif (Array.isArray(translatedContent)) {\n  for (const item of translatedContent) {\n    switch (tableName) {\n      case 'course_translations':\n        updates.push({\n          query: `INSERT INTO course_translations (course_id, language_code, title, description, learning_objectives, created_at, updated_at)\n                  VALUES ($1, $2, $3, $4, $5, NOW(), NOW())\n                  ON CONFLICT (course_id, language_code) \n                  DO UPDATE SET \n                    title = EXCLUDED.title,\n                    description = EXCLUDED.description,\n                    learning_objectives = EXCLUDED.learning_objectives,\n                    updated_at = NOW()`,\n          params: [item.course_id, targetLanguage, item.title, item.description, item.learning_objectives]\n        });\n        break;\n        \n      case 'module_translations':\n        updates.push({\n          query: `INSERT INTO module_translations (module_id, language_code, title, description, created_at, updated_at)\n                  VALUES ($1, $2, $3, $4, NOW(), NOW())\n                  ON CONFLICT (module_id, language_code)\n                  DO UPDATE SET \n                    title = EXCLUDED.title,\n                    description = EXCLUDED.description,\n                    updated_at = NOW()`,\n          params: [item.module_id, targetLanguage, item.title, item.description]\n        });\n        break;\n        \n      case 'lesson_translations':\n        updates.push({\n          query: `INSERT INTO lesson_translations (lesson_id, language_code, title, content, created_at, updated_at)\n                  VALUES ($1, $2, $3, $4, NOW(), NOW())\n                  ON CONFLICT (lesson_id, language_code)\n                  DO UPDATE SET \n                    title = EXCLUDED.title,\n                    content = EXCLUDED.content,\n                    updated_at = NOW()`,\n          params: [item.lesson_id, targetLanguage, item.title, item.content]\n        });\n        break;\n        \n      case 'module_question_translations':\n        // First update the question (no explanation column exists)\n        updates.push({\n          query: `INSERT INTO module_question_translations (module_question_id, language_code, question_text, created_at, updated_at)\n                  VALUES ($1, $2, $3, NOW(), NOW())\n                  ON CONFLICT (module_question_id, language_code)\n                  DO UPDATE SET \n                    question_text = EXCLUDED.question_text,\n                    updated_at = NOW()`,\n          params: [item.module_question_id, targetLanguage, item.question_text]\n        });\n        \n        // Then update all options\n        if (item.options && Array.isArray(item.options)) {\n          for (const option of item.options) {\n            updates.push({\n              query: `INSERT INTO module_question_option_translations (module_question_option_id, language_code, option_text, created_at, updated_at)\n                      VALUES ($1, $2, $3, NOW(), NOW())\n                      ON CONFLICT (module_question_option_id, language_code)\n                      DO UPDATE SET \n                        option_text = EXCLUDED.option_text,\n                        updated_at = NOW()`,\n              params: [option.id, targetLanguage, option.option_text]\n            });\n          }\n        }\n        break;\n    }\n  }\n}\n\n// Return each update as separate item for batch processing\nreturn updates.map(update => ({\n  json: {\n    table_name: tableName,\n    ...update,\n    success: true\n  }\n}));"
      },
      "id": "a8296901-680c-49ec-90af-8b508c9b4c59",
      "name": "Prepare Database Updates",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        800,
        -48
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "={{ $json.query }}",
        "options": {}
      },
      "id": "0686fe8e-5800-4665-b134-b5f8a644daf5",
      "name": "Execute Database Update",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        944,
        96
      ],
      "retryOnFail": true,
      "credentials": {
        "postgres": {
          "id": "RUVxlMmZvsZC2IGe",
          "name": "Postgres account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "// Collect all results and prepare final status\nconst items = $input.all();\n\n// Initialize counters\nconst processedTables = {};\nconst errors = [];\nlet totalProcessed = 0;\n\n// Process each result\nfor (const item of items) {\n  const data = item.json;\n  \n  if (data.error) {\n    errors.push(data.error);\n  } else if (data.table_name) {\n    if (!processedTables[data.table_name]) {\n      processedTables[data.table_name] = { table_name: data.table_name, rows_processed: 0 };\n    }\n    processedTables[data.table_name].rows_processed += 1;\n    totalProcessed += 1;\n  }\n}\n\n// Get original context from first item\nconst originalContext = items[0]?.json?.translation_context || \n  items[0]?.json || {};\n\n// Build final status\nconst finalStatus = {\n  status: errors.length > 0 ? 'partial_success' : 'success',\n  course_id: originalContext.course_id,\n  processed_tables: Object.values(processedTables),\n  errors: errors,\n  log: errors.length > 0 ? \n    `Translation completed with ${errors.length} error(s). ${totalProcessed} items processed.` :\n    `Translation completed successfully. ${totalProcessed} items processed across ${Object.keys(processedTables).length} table(s).`\n};\n\nreturn [{ json: finalStatus }];"
      },
      "id": "467577ba-a553-4782-8541-eebbc4f04190",
      "name": "Collect Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1168,
        96
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ JSON.stringify($json, null, 2) }}",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          }
        }
      },
      "id": "0cf89b9f-f6d7-4123-a370-182e51d9f7d1",
      "name": "Respond Success",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.5,
      "position": [
        1392,
        96
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ JSON.stringify($json.status, null, 2) }}",
        "options": {
          "responseCode": 400,
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          }
        }
      },
      "id": "8a896f65-973d-4638-b5f1-aac1faa48656",
      "name": "Respond Error",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.5,
      "position": [
        -384,
        672
      ]
    }
  ],
  "connections": {
    "Course Translation Webhook": {
      "main": [
        [
          {
            "node": "Validate Input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Input": {
      "main": [
        [
          {
            "node": "Check Validation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Validation": {
      "main": [
        [
          {
            "node": "Respond Error",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Fetch Course Context",
            "type": "main",
            "index": 0
          },
          {
            "node": "Fetch Course Translations",
            "type": "main",
            "index": 0
          },
          {
            "node": "Fetch Module Translations",
            "type": "main",
            "index": 0
          },
          {
            "node": "Fetch Lesson Translations",
            "type": "main",
            "index": 0
          },
          {
            "node": "Fetch Questions with Options",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Course Context": {
      "main": [
        [
          {
            "node": "Merge Translation Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Course Translations": {
      "main": [
        [
          {
            "node": "Merge Translation Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Module Translations": {
      "main": [
        [
          {
            "node": "Merge Translation Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Lesson Translations": {
      "main": [
        [
          {
            "node": "Merge Translation Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Questions with Options": {
      "main": [
        [
          {
            "node": "Merge Translation Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Translation Data": {
      "main": [
        [
          {
            "node": "Split Items in Batches",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Items in Batches": {
      "main": [
        [
          {
            "node": "Translate Content",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Collect Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Translate Content": {
      "main": [
        [
          {
            "node": "Prepare Database Updates",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Database Updates": {
      "main": [
        [
          {
            "node": "Execute Database Update",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Database Update": {
      "main": [
        [
          {
            "node": "Split Items in Batches",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Collect Results": {
      "main": [
        [
          {
            "node": "Respond Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {
    "Course Translation Webhook": [
      {
        "json": {
          "headers": {
            "host": "utilco.app.n8n.cloud",
            "user-agent": "curl/8.7.1",
            "content-length": "119",
            "accept": "*/*",
            "accept-encoding": "gzip, br",
            "cdn-loop": "cloudflare; loops=1; subreqs=1",
            "cf-connecting-ip": "2001:8a0:58dc:d500:852f:3bb9:f6dc:9564",
            "cf-ew-via": "15",
            "cf-ipcountry": "PT",
            "cf-ray": "97304a71e24211e6-LIS",
            "cf-visitor": "{\"scheme\":\"https\"}",
            "cf-worker": "n8n.cloud",
            "content-type": "application/json",
            "x-forwarded-for": "2001:8a0:58dc:d500:852f:3bb9:f6dc:9564, 172.68.103.149",
            "x-forwarded-host": "utilco.app.n8n.cloud",
            "x-forwarded-port": "443",
            "x-forwarded-proto": "https",
            "x-forwarded-server": "traefik-prod-users-gwc-10-6888ffdd77-g92dm",
            "x-is-trusted": "yes",
            "x-real-ip": "2001:8a0:58dc:d500:852f:3bb9:f6dc:9564"
          },
          "params": {},
          "query": {},
          "body": {
            "course_id": "fe7e5cbf-1c42-4054-a871-e203ac5377db",
            "source_language": "da",
            "target_language": "en"
          },
          "webhookUrl": "https://utilco.app.n8n.cloud/webhook/translate-course",
          "executionMode": "production"
        }
      }
    ]
  },
  "versionId": "a0f70740-9001-4f3c-b921-9fe11e615c88",
  "triggerCount": 1,
  "shared": [
    {
      "createdAt": "2025-08-22T05:37:47.265Z",
      "updatedAt": "2025-08-22T05:37:47.265Z",
      "role": "workflow:owner",
      "workflowId": "SO2Vti0TEOkQlTPl",
      "projectId": "SFLNAzqJIfhKMhJx"
    }
  ],
  "tags": []
}