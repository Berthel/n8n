{
  "createdAt": "2025-09-06T09:36:22.336Z",
  "updatedAt": "2025-09-06T09:41:06.000Z",
  "id": "ZPne8T6KivBuF4hm",
  "name": "n8n github backup",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "options": {}
      },
      "id": "8cf4a052-f3be-4767-924b-9f731696faef",
      "name": "Loop Over Items",
      "type": "n8n-nodes-base.splitInBatches",
      "position": [
        -544,
        912
      ],
      "executeOnce": false,
      "typeVersion": 3
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "edit",
        "owner": {
          "__rl": true,
          "mode": "",
          "value": "={{ $(\"Configuration\").item.json.repo.owner }}"
        },
        "repository": {
          "__rl": true,
          "mode": "",
          "value": "={{ $(\"Configuration\").item.json.repo.name }}"
        },
        "filePath": "={{ $json.context.newFile.path }}",
        "fileContent": "={{ JSON.stringify($json.n8nWorkflowData.base64Decode().parseJson(), null, 2) }}",
        "commitMessage": "=update: {{ $json.context.newFile.name }}"
      },
      "id": "612ed30a-371d-48ab-9d05-67d1e3aa687a",
      "name": "Update file content and commit",
      "type": "n8n-nodes-base.github",
      "position": [
        1408,
        1872
      ],
      "webhookId": "f2d754dd-b68d-41e8-a662-7e91c1c3aa95",
      "typeVersion": 1,
      "credentials": {
        "githubApi": {
          "id": "GyOhKzjiSuvh5K83",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours"
            }
          ]
        }
      },
      "id": "3aacade0-8ebb-4912-89f2-678ceff010d9",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [
        -3088,
        864
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "filters": {},
        "requestOptions": {}
      },
      "id": "3ae66168-950b-4023-be80-12631d5e9fce",
      "name": "Get all workflows",
      "type": "n8n-nodes-base.n8n",
      "position": [
        -1504,
        848
      ],
      "typeVersion": 1,
      "credentials": {
        "n8nApi": {
          "id": "6dPDW6izhuhIf0l9",
          "name": "n8n account 2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Encode workflow data to base64 to prevent data pollution\nconst items = $input.all();\n\nfor (const item of items) {\n  const originalWorkflow = item.json;\n\n  item.json = {\n    id: originalWorkflow.id,\n    name: originalWorkflow.name,\n    n8nWorkflowData: Buffer.from(JSON.stringify(originalWorkflow)).toString('base64')\n  };\n}\n\nreturn items;"
      },
      "id": "89d20be5-790c-4f69-97f1-0c237a94f83b",
      "name": "Encode N8N workflows",
      "type": "n8n-nodes-base.code",
      "position": [
        -1280,
        848
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "jsCode": "// Helper function to ensure stable JSON serialization for reliable comparison.\nfunction sortKeysDeep(obj) {\n  if (obj === null || typeof obj !== 'object') return obj;\n  if (Array.isArray(obj)) return obj.map(sortKeysDeep);\n  const out = {};\n  Object.keys(obj).sort().forEach(k => { out[k] = sortKeysDeep(obj[k]); });\n  return out;\n}\n\nconst items = $input.all();\nconst WORKFLOWS_DIR = $node[\"Configuration\"].json.repo.path;\n\nfor (const item of items) {\n  const src = item.json || {};\n  const flags = {\n    fileExists: false,\n    nameChanged: false,\n    shouldCommit: false\n  };\n  // Initialize the context container\n  item.json.context = {\n    oldFile: { path: '', name: '' },\n    newFile: { path: '', name: '' },\n    operation: ''\n  };\n  const context = item.json.context;\n\n  // 1. Determine if the file exists on GitHub.\n  const hasGithub = typeof src.githubWorkflowData === 'string' && src.githubWorkflowData.length > 0;\n  flags.fileExists = hasGithub;\n\n  // 2. Extract the current workflow name from the N8N data.\n  const currentName = src.name || '';\n  context.newFile.name = currentName;\n\n  // 3. Detect renames and set file paths.\n  if (typeof src.filePath === 'string' && src.filePath.length > 0) {\n    const parts = src.filePath.split('/');\n    const filename = parts.pop() || '';\n    const githubName = filename.endsWith('.json') ? filename.slice(0, -5) : filename;\n    \n    flags.nameChanged = githubName !== currentName;\n    context.oldFile.path = src.filePath;\n    context.oldFile.name = githubName;\n    \n    const dirPath = parts.join('/');\n    context.newFile.path = `${dirPath}/${currentName}.json`;\n\n  } else {\n    flags.nameChanged = false;\n    context.newFile.path = `${WORKFLOWS_DIR}/${currentName}.json`.replace(/\\/+/g, '/');\n  }\n\n  // 4. Perform a stable comparison to see if a commit is needed.\n  try {\n    if (flags.fileExists) {\n      const n8nJsonStr = Buffer.from(src.n8nWorkflowData, 'base64').toString('utf8');\n      const githubJsonStr = Buffer.from(src.githubWorkflowData, 'base64').toString('utf8');\n      const n8nObj = JSON.parse(n8nJsonStr);\n      const githubObj = JSON.parse(githubJsonStr);\n      const stableN8nStr = JSON.stringify(sortKeysDeep(n8nObj));\n      const stableGithubStr = JSON.stringify(sortKeysDeep(githubObj));\n      flags.shouldCommit = stableN8nStr !== stableGithubStr;\n    } else {\n      flags.shouldCommit = true; // New file, always commit.\n    }\n  } catch (e) {\n    flags.shouldCommit = true;   // If parsing or comparison fails, better to commit.\n  }\n\n  // 5. Determine the final operation type.\n  if (flags.nameChanged) {\n    context.operation = 'rename';\n  } else if (!flags.fileExists) {\n    context.operation = 'create';\n  } else if (flags.shouldCommit) {\n    context.operation = 'update';\n  } else {\n    context.operation = 'skip';\n  }\n}\n\nreturn items;"
      },
      "id": "a191155f-e634-4152-aaf2-b4caf15a0cb0",
      "name": "Decide changes",
      "type": "n8n-nodes-base.code",
      "position": [
        -288,
        928
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "delete",
        "owner": {
          "__rl": true,
          "mode": "",
          "value": "={{ $(\"Configuration\").item.json.repo.owner }}"
        },
        "repository": {
          "__rl": true,
          "mode": "",
          "value": "={{ $(\"Configuration\").item.json.repo.name }}"
        },
        "filePath": "={{ $json.context.oldFile.path }}",
        "commitMessage": "=rename: {{ $json.context.oldFile.name }} -> {{ $json.context.newFile.name }} (step 1/2: remove old)"
      },
      "id": "c78955a4-91fb-4bf0-8336-6982a3538d9f",
      "name": "Delete old file",
      "type": "n8n-nodes-base.github",
      "position": [
        1568,
        1408
      ],
      "webhookId": "1bd59af3-c8ee-4664-9cfd-df3ab4b6793d",
      "typeVersion": 1,
      "credentials": {
        "githubApi": {
          "id": "GyOhKzjiSuvh5K83",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "resource": "file",
        "owner": {
          "__rl": true,
          "mode": "",
          "value": "={{ $(\"Configuration\").item.json.repo.owner }}"
        },
        "repository": {
          "__rl": true,
          "mode": "",
          "value": "={{ $(\"Configuration\").item.json.repo.name }}"
        },
        "filePath": "={{ $json.context.newFile.path }}",
        "fileContent": "={{ JSON.stringify($json.n8nWorkflowData.base64Decode().parseJson(), null, 2) }}",
        "commitMessage": "=rename: {{ $json.context.oldFile.name }} -> {{ $json.context.newFile.name }} (step 2/2: create new)"
      },
      "id": "c5022744-c5dd-4984-a2ad-4ccefdf3c9a6",
      "name": "Create new file (rename)",
      "type": "n8n-nodes-base.github",
      "position": [
        1968,
        1408
      ],
      "webhookId": "1b7a1463-d11a-4c0c-a596-a4b09e003d5a",
      "typeVersion": 1,
      "credentials": {
        "githubApi": {
          "id": "GyOhKzjiSuvh5K83",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "mode": "combine",
        "fieldsToMatchString": "id",
        "joinMode": "enrichInput1",
        "options": {
          "clashHandling": {
            "values": {
              "resolveClash": "preferInput1"
            }
          }
        }
      },
      "id": "b7bd3f66-7987-4833-b74a-c79153c8017a",
      "name": "Merge after create (rename)",
      "type": "n8n-nodes-base.merge",
      "position": [
        2208,
        1392
      ],
      "typeVersion": 3.2,
      "notes": "Keeps the original context intact across the GitHub step. Prevents losing flags and fields."
    },
    {
      "parameters": {
        "mode": "combine",
        "fieldsToMatchString": "id",
        "joinMode": "enrichInput1",
        "options": {
          "clashHandling": {
            "values": {
              "resolveClash": "preferInput1"
            }
          }
        }
      },
      "id": "f38d6ce2-e3f4-4ea7-95a0-8e941fbca451",
      "name": "Merge after update",
      "type": "n8n-nodes-base.merge",
      "position": [
        1696,
        1856
      ],
      "typeVersion": 3.2,
      "notes": "Keeps the original context intact across the GitHub step. Prevents losing flags and fields."
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "list",
        "owner": {
          "__rl": true,
          "mode": "name",
          "value": "={{ $(\"Configuration\").item.json.repo.owner }}"
        },
        "repository": {
          "__rl": true,
          "mode": "name",
          "value": "={{ $(\"Configuration\").item.json.repo.name }}"
        },
        "filePath": "={{ $(\"Configuration\").item.json.repo.path }}"
      },
      "id": "c23afdb3-fa27-4ab3-a41e-9f067d071157",
      "name": "List files",
      "type": "n8n-nodes-base.github",
      "position": [
        -1728,
        1040
      ],
      "webhookId": "2e1f9567-52d4-4047-980c-6b4a57d4bd40",
      "typeVersion": 1.1,
      "credentials": {
        "githubApi": {
          "id": "GyOhKzjiSuvh5K83",
          "name": "GitHub account"
        }
      },
      "onError": "continueErrorOutput",
      "notes": "An edge case handling. Do not stop the whole workflow if there's no such folder."
    },
    {
      "parameters": {
        "mode": "combine",
        "fieldsToMatchString": "id",
        "joinMode": "enrichInput1",
        "options": {
          "clashHandling": {
            "values": {
              "resolveClash": "preferInput1"
            }
          }
        }
      },
      "id": "39eb9d29-5e98-425d-af24-b4303757bef2",
      "name": "Merge",
      "type": "n8n-nodes-base.merge",
      "position": [
        -1056,
        928
      ],
      "typeVersion": 3.2
    },
    {
      "parameters": {
        "content": "## Rename a file (two-step)\n1. Delete the old filename\n1. Create a new filename",
        "height": 448,
        "width": 880,
        "color": 7
      },
      "id": "31b4946d-83e7-4278-8bbd-b2590747cef3",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1504,
        1168
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Collect data\n- N8N workflows list\n- GitHub files list ",
        "height": 448,
        "width": 880,
        "color": 7
      },
      "id": "7e05e142-9823-46f5-b14a-94f85d76add1",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1792,
        752
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Set parameters\n### GitHub\n- Repo owner\n- Repo name\n- Repo folder to store workflow backups\n### Reports\n- Telegram Chat ID to send notifications to\n- Do you need a report each time or only if something changed",
        "height": 448,
        "width": 326,
        "color": 4
      },
      "id": "06fbbf5e-5630-4bb4-a6a9-c0d72f498baf",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -2848,
        592
      ],
      "typeVersion": 1,
      "disabled": true
    },
    {
      "parameters": {
        "content": "## Tune the schedule\nYou could change the check interval here.\n\nDefault: every hour",
        "height": 448,
        "width": 326,
        "color": 4
      },
      "id": "cf8e5565-1d8c-498a-aa8a-1e6d20081205",
      "name": "Sticky Note3",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -3200,
        592
      ],
      "typeVersion": 1,
      "disabled": true
    },
    {
      "parameters": {
        "content": "## Execution report\nYou could send this report to Telegram. See parameters in `Configuration` node for details.\nIf you don't need this -- delete this part.",
        "height": 272,
        "width": 1174,
        "color": 7
      },
      "id": "c63ae96d-b77a-49de-9cd3-befcd9b62e62",
      "name": "Sticky Note4",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        0,
        0
      ],
      "typeVersion": 1,
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "// Aggregate arrays and flags for summary (no rendering)\n\nfunction normalizeName(item) {\n  return String(\n    item.json?.name || 'unknown'\n  );\n}\n\nconst items = $input.all();\n\nconst buckets = { create: [], update: [], rename: [], skip: [] };\n\nfor (const it of items) {\n  const name = normalizeName(it);\n  const op = it.json?.context.operation;\n  const oldName = it.json?.context.oldFile.name || name;\n  const newName = it.json?.context.newFile.name || name;\n\n  if (op === 'rename') buckets.rename.push(`${oldName} -> ${newName}`);\n  else if (op === 'create') buckets.create.push(name);\n  else if (op === 'update') buckets.update.push(name);\n  else buckets.skip.push(name);\n}\n\nconst isAnythingChanged = buckets.create.length > 0 || buckets.update.length > 0 || buckets.rename.length > 0;\n\nreturn [{ json: {\n  isAnythingChanged,\n  created: buckets.create,\n  updated: buckets.update,\n  renamed: buckets.rename,\n  skipped: buckets.skip\n} }];"
      },
      "id": "5529e700-1927-4e57-a1cf-307e303e1143",
      "name": "Build summary arrays",
      "type": "n8n-nodes-base.code",
      "position": [
        304,
        112
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "jsCode": "// Helper function to escape text for Telegram's MarkdownV2 parser\nconst escapeMarkdownV2 = (str) => {\n  // For the full list of characters, see https://core.telegram.org/bots/api#markdownv2-style\n  return String(str).replace(/([_\\[\\]()~`>#+=|{}.!*-])/g, '\\\\$1');\n};\n\nconst all = $input.all();\nconst data = (all[0] && all[0].json) || {};\n\nconst config = $('Configuration').first().json;\nconst repoOwner = config.repo.owner;\nconst repoName = config.repo.name;\nconst repoPath = config.repo.path;\n\n// Construct repository URL using /blob/-/ for a branch-agnostic link\nconst repoUrl = `https://github.com/${repoOwner}/${repoName}/blob/-/${repoPath}`;\n\n// The link's *text* must be escaped, but the URL must not be.\nconst repoLinkText = escapeMarkdownV2(`${repoOwner}/${repoName}/${repoPath}`);\nconst repoLink = `[${repoLinkText}](${repoUrl})`;\n\nconst getList = key => (Array.isArray(data[key]) ? data[key] : []);\nconst sortAsc = (a, b) => String(a).localeCompare(String(b));\n\nconst sections = [\n  { key: 'created', title: 'Created' },\n  { key: 'updated', title: 'Updated' },\n  { key: 'renamed', title: 'Renamed' },\n  { key: 'skipped', title: 'Skipped (no changes)' },\n];\n\nconst summaryParts = [\n  `created ${getList('created').length}`,\n  `updated ${getList('updated').length}`,\n  `renamed ${getList('renamed').length}`,\n  `skipped ${getList('skipped').length}`\n];\n\n// Construct the final message with the new header format\nconst messageLines = [\n  '*Backup N8N workflows to GitHub*', // Main title\n  '', // Blank line for spacing\n  `Repo: ${repoLink}`,\n  `Totals: ${escapeMarkdownV2(summaryParts.join(', '))}`\n];\n\n// Append detailed lists as before\nfor (const { key, title } of sections) {\n  const list = [...getList(key)].sort(sortAsc);\n  if (list.length) {\n    messageLines.push('', `*${escapeMarkdownV2(title)}:*`);\n    for (const item of list) {\n      let line;\n      if (key === 'renamed') {\n        const [oldName, newName] = item.split(' -> ');\n        line = `\\`${oldName}.json\\` ${escapeMarkdownV2('->')} \\`${newName}.json\\``;\n      } else {\n        line = `\\`${item}.json\\``;\n      }\n      messageLines.push(line);\n    }\n  }\n}\n\nconst message = messageLines.join('\\n');\nreturn [{ json: { message } }];"
      },
      "id": "8a5d7eff-20a5-40cc-b90f-b1f7c7d39b4f",
      "name": "Render summary",
      "type": "n8n-nodes-base.code",
      "position": [
        752,
        112
      ],
      "notesInFlow": false,
      "typeVersion": 2,
      "notes": "## Connecting to a messenger\n\nUse {{$json.message}} as message text. 'isAnythingChanged' controls whether to send."
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "or",
          "conditions": [
            {
              "id": "8148a3ce-16fe-4074-9f57-c49072be8a8f",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              },
              "leftValue": "={{ $node[\"Configuration\"].json.report.verbose }}",
              "rightValue": ""
            },
            {
              "id": "ee4ef204-341f-444a-a26a-299aa0cde573",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              },
              "leftValue": "={{ $json.isAnythingChanged }}",
              "rightValue": ""
            }
          ]
        },
        "options": {}
      },
      "id": "401db71f-aaf2-4fb9-8258-efb6dfba2f11",
      "name": "Anything changed?",
      "type": "n8n-nodes-base.if",
      "position": [
        528,
        112
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "jsCode": "let items = $input.all();\n\nfor (let item of items) {\n    try {\n        const contentBase64 = item.json.content;\n        const path = item.json.path;\n        const sha = item.json.sha;\n\n        // Decode and parse GitHub file content to extract name\n        const content = Buffer.from(contentBase64, 'base64').toString('utf8');\n        const workflow = JSON.parse(content);\n\n        // Keep only the fields we need from GitHub side, store as base64\n        item.json = {\n            id: workflow.id,\n            name: workflow.name,\n            filePath: path,\n            githubWorkflowData: contentBase64, // Store as base64 to match N8N side\n            sha: sha\n        };\n\n    } catch (error) {\n        // Non-JSON or invalid workflow file\n        console.log(`Error parsing file ${item.json.path}: ${error.message}`);\n        item.json = {\n            id: null,\n            name: null,\n            filePath: item.json.path,\n            error: error.message\n        };\n    }\n}\n\nreturn items;"
      },
      "id": "e6c1d738-456e-4282-a697-2141a7e1db24",
      "name": "Extract workflow parameters",
      "type": "n8n-nodes-base.code",
      "position": [
        -1280,
        1040
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "get",
        "owner": {
          "__rl": true,
          "mode": "name",
          "value": "={{ $(\"Configuration\").item.json.repo.owner }}"
        },
        "repository": {
          "__rl": true,
          "mode": "name",
          "value": "={{ $(\"Configuration\").item.json.repo.name }}"
        },
        "filePath": "={{ $json.path }}",
        "asBinaryProperty": false,
        "additionalParameters": {}
      },
      "id": "79f93834-133a-4c26-a556-531e1960bee8",
      "name": "Get files",
      "type": "n8n-nodes-base.github",
      "position": [
        -1504,
        1040
      ],
      "webhookId": "93c8a2dd-ddad-4837-a062-25473eee1208",
      "typeVersion": 1.1,
      "credentials": {
        "githubApi": {
          "id": "GyOhKzjiSuvh5K83",
          "name": "GitHub account"
        }
      },
      "onError": "continueErrorOutput",
      "notes": "An edge case handling. Do not stop the whole workflow if there's no such folder."
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "03191658-7c7b-4f85-a07b-35d9749d91f3",
              "operator": {
                "type": "number",
                "operation": "exists",
                "singleValue": true
              },
              "leftValue": "={{ $(\"Configuration\").item.json.report.tg.chatID }}",
              "rightValue": 0
            },
            {
              "id": "3277a7ef-0895-4fbf-beb2-432f54cc8efc",
              "operator": {
                "type": "number",
                "operation": "notEquals"
              },
              "leftValue": "={{ $(\"Configuration\").item.json.report.tg.chatID }}",
              "rightValue": 0
            }
          ]
        },
        "options": {}
      },
      "id": "aca0e3ed-3fe7-4e2d-a228-bd85f62f4cf4",
      "name": "Is Telegram configured?",
      "type": "n8n-nodes-base.if",
      "position": [
        80,
        112
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "chatId": "={{ $node[\"Configuration\"].json.report.tg.chatID }}",
        "text": "={{ $json.message }}",
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "MarkdownV2"
        }
      },
      "id": "5c5c777d-2a96-40bc-b870-690f370ddcc1",
      "name": "Send a message",
      "type": "n8n-nodes-base.telegram",
      "position": [
        976,
        112
      ],
      "webhookId": "ea0e343d-7ffa-4dd7-a3aa-0e7e45ad5753",
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "resource": "file",
        "owner": {
          "__rl": true,
          "mode": "",
          "value": "={{ $(\"Configuration\").item.json.repo.owner }}"
        },
        "repository": {
          "__rl": true,
          "mode": "",
          "value": "={{ $(\"Configuration\").item.json.repo.name }}"
        },
        "filePath": "={{ $json.context.newFile.path }}",
        "fileContent": "={{ JSON.stringify($json.n8nWorkflowData.base64Decode().parseJson(), null, 2) }}",
        "commitMessage": "=create: {{ $json.context.newFile.name }}"
      },
      "id": "f56cb01d-cefa-4ed5-a3dc-135a81b96777",
      "name": "Create new file",
      "type": "n8n-nodes-base.github",
      "position": [
        1120,
        2416
      ],
      "webhookId": "66429ae4-4b7d-4fb5-8438-26cdf6c4faa8",
      "typeVersion": 1,
      "credentials": {
        "githubApi": {
          "id": "GyOhKzjiSuvh5K83",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "mode": "combine",
        "fieldsToMatchString": "id",
        "joinMode": "enrichInput1",
        "options": {
          "clashHandling": {
            "values": {
              "resolveClash": "preferInput1"
            }
          }
        }
      },
      "id": "df4db646-368a-4339-903f-efebeff296e6",
      "name": "Merge after create",
      "type": "n8n-nodes-base.merge",
      "position": [
        1408,
        2400
      ],
      "typeVersion": 3.2,
      "notes": "Keeps the original context intact across the GitHub step. Prevents losing flags and fields."
    },
    {
      "parameters": {
        "content": "## Update an existing file",
        "height": 448,
        "width": 880,
        "color": 7
      },
      "id": "afa2f02c-87de-4710-9986-d7442b415dfd",
      "name": "Sticky Note5",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1152,
        1712
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Create a new file",
        "height": 448,
        "width": 880,
        "color": 7
      },
      "id": "8fdbd475-a3b6-47c1-914f-d7970f4fbe52",
      "name": "Sticky Note6",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        864,
        2256
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "b84e4af3-d1fe-4909-8110-a17191853bfb",
      "name": "No Operation, do nothing",
      "type": "n8n-nodes-base.noOp",
      "position": [
        880,
        2976
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Nothing to do",
        "height": 448,
        "width": 880,
        "color": 7
      },
      "id": "65143e2d-9b11-4e4a-b00e-804fb8fc77a1",
      "name": "Sticky Note7",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        464,
        2800
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "errorMessage": "=Invalid operation: \"{{ $json.context.operation }}\". You should look at the code in the \"Decide changes\" node."
      },
      "id": "c46724cf-33f0-4f0d-8e73-d3650f4c4d20",
      "name": "Stop and Error",
      "type": "n8n-nodes-base.stopAndError",
      "position": [
        160,
        3376
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Controller",
        "height": 448,
        "width": 880,
        "color": 7
      },
      "id": "0f59ff14-89e9-4ded-9ae0-3f575810b4f1",
      "name": "Sticky Note8",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -688,
        752
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": false,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "5af9aafc-3ee1-4855-89b2-b0ceb83b3169",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $json.context.operation }}",
                    "rightValue": "rename"
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "=rename"
            },
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": false,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "849881fc-2d0e-4154-b6c2-10ff6c2b5480",
                    "operator": {
                      "name": "filter.operator.equals",
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $json.context.operation }}",
                    "rightValue": "update"
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "update"
            },
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": false,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "85f4cce5-476e-4970-82b4-0b04cc67870f",
                    "operator": {
                      "name": "filter.operator.equals",
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $json.context.operation }}",
                    "rightValue": "create"
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "create"
            },
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": false,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "51919025-e488-4557-9cd9-23f4be9bbf06",
                    "operator": {
                      "name": "filter.operator.equals",
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $json.context.operation }}",
                    "rightValue": "skip"
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "skip"
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra",
          "ignoreCase": true,
          "renameFallbackOutput": "error"
        }
      },
      "id": "aec3f05c-699e-4b41-8704-66fe4f3c94d1",
      "name": "Router",
      "type": "n8n-nodes-base.switch",
      "position": [
        -48,
        880
      ],
      "typeVersion": 3.2
    },
    {
      "parameters": {
        "mode": "combine",
        "fieldsToMatchString": "id",
        "joinMode": "enrichInput1",
        "options": {
          "clashHandling": {
            "values": {
              "resolveClash": "preferInput1"
            }
          }
        }
      },
      "id": "0bbdfb55-c26b-4aee-a4d0-9068be1096f7",
      "name": "Merge after delete (rename)",
      "type": "n8n-nodes-base.merge",
      "position": [
        1792,
        1248
      ],
      "typeVersion": 3.2,
      "notes": "Keeps the original context intact across the GitHub step. Prevents losing flags and fields."
    },
    {
      "parameters": {
        "values": {
          "number": [
            {
              "name": "report.tg.chatID",
              "value": null
            }
          ],
          "string": [
            {
              "name": "repo.owner",
              "value": "berthel"
            },
            {
              "name": "repo.name",
              "value": "n8n"
            },
            {
              "name": "repo.path",
              "value": "heritage/"
            }
          ],
          "boolean": [
            {
              "name": "report.verbose"
            }
          ]
        },
        "options": {}
      },
      "id": "c342fdff-3a74-4539-b20f-1791e70688f7",
      "name": "Configuration",
      "type": "n8n-nodes-base.set",
      "position": [
        -2752,
        864
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Advanced n8n Workflow Sync with GitHub\n\nThis workflow automatically backs up your n8n workflows to a GitHub repository. It intelligently detects changes, handles workflow renames, and commits only when actual modifications occur, providing a clean version history.\n\n### ✨ Key Features:\n- **Intelligent Sync**: Reliable backup of n8n workflows to GitHub.\n- **Rename Support**: Automatically handles workflow renames.\n- **Efficient Commits**: Only commits real changes, keeping your repo clean.\n- **Clear History**: Informative commit messages (create, update, rename).\n\n### 🚀 Quick Setup:\n1.  **Credentials**: Set up GitHub, n8n API, and optional Telegram credentials in n8n.\n2.  **Configuration Node**: Open the `Configuration` node (green) and update:\n    - `repo.owner`: Your GitHub username\n    - `repo.name`: Your GitHub repository name\n    - `repo.path`: Folder for backups (e.g., `workflows/`)\n    - `report.tg.chatID` (Optional): Telegram chat ID, or `0` to disable.\n3.  **Connect Credentials**: Link your created credentials to the respective GitHub, n8n, and Telegram nodes.\n4.  **Schedule Trigger**: Adjust the backup frequency in the `Schedule Trigger` node.\n5.  **Activate**: Save and activate the workflow.\n\n### ⚙️ How It Works (Simple Steps)\n\n1.  **Get n8n Workflows**: The workflow starts by fetching all your current workflows from n8n.\n2.  **Get GitHub Files**: At the same time, it lists all existing workflow files from your GitHub repository.\n3.  **Compare & Decide**: It then compares each n8n workflow with its GitHub counterpart. It checks if anything changed, if it was renamed, or if it's new.\n4.  **Take Action**:\n    *   If a workflow is **new**, it's created on GitHub.\n    *   If a workflow is **updated**, the file content is changed on GitHub.\n    *   If a workflow was **renamed**, the old file is deleted, and a new one is created.\n    *   If **nothing changed**, the workflow is skipped.\n5.  **Send Report**: Finally, it can send a summary report to Telegram about what happened.\n\n### 💡 What's Next?\nFuture updates will include automatic archiving of inactive workflows and performance optimizations. Follow my profile for new workflow publications!",
        "height": 960,
        "width": 672
      },
      "id": "2f450927-3d70-461b-b75c-8d185fe9daa1",
      "name": "Sticky Note10",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -3200,
        1072
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "errorMessage": "Incomplete GitHub configuration. Please check \"Configuration\" node."
      },
      "id": "7a8ecf7f-78e8-4945-8502-7ecd50495af4",
      "name": "Stop on empty config",
      "type": "n8n-nodes-base.stopAndError",
      "position": [
        -2096,
        1024
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "0b285299-edd5-41a0-85e8-3d94246e1cff",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              },
              "leftValue": "={{ $json.repo.owner }}",
              "rightValue": ""
            },
            {
              "id": "c9f894e0-cf42-45e1-87bd-13c2bd024b48",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              },
              "leftValue": "={{ $json.repo.name }}",
              "rightValue": ""
            },
            {
              "id": "f1591996-df67-4caf-8171-a049993268d2",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              },
              "leftValue": "={{ $json.repo.path }}",
              "rightValue": ""
            }
          ]
        },
        "options": {}
      },
      "id": "46c89fe2-be28-44f4-adce-b4d0d6901649",
      "name": "Assert GitHub config",
      "type": "n8n-nodes-base.if",
      "position": [
        -2336,
        864
      ],
      "typeVersion": 2.2,
      "notes": "Pre-provisioning safe fuse"
    }
  ],
  "connections": {
    "Merge": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Router": {
      "main": [
        [
          {
            "node": "Delete old file",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge after delete (rename)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Update file content and commit",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge after update",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Create new file",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge after create",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Stop and Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get files": {
      "main": [
        [
          {
            "node": "Extract workflow parameters",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "List files": {
      "main": [
        [
          {
            "node": "Get files",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Configuration": {
      "main": [
        [
          {
            "node": "Assert GitHub config",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Decide changes": {
      "main": [
        [
          {
            "node": "Router",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Render summary": {
      "main": [
        [
          {
            "node": "Send a message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create new file": {
      "main": [
        [
          {
            "node": "Merge after create",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Delete old file": {
      "main": [
        [
          {
            "node": "Merge after delete (rename)",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "Is Telegram configured?",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Decide changes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Configuration",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Anything changed?": {
      "main": [
        [
          {
            "node": "Render summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get all workflows": {
      "main": [
        [
          {
            "node": "Encode N8N workflows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge after create": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge after update": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Assert GitHub config": {
      "main": [
        [
          {
            "node": "Get all workflows",
            "type": "main",
            "index": 0
          },
          {
            "node": "List files",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Stop on empty config",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build summary arrays": {
      "main": [
        [
          {
            "node": "Anything changed?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Encode N8N workflows": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is Telegram configured?": {
      "main": [
        [
          {
            "node": "Build summary arrays",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create new file (rename)": {
      "main": [
        [
          {
            "node": "Merge after create (rename)",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "No Operation, do nothing": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract workflow parameters": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge after create (rename)": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge after delete (rename)": {
      "main": [
        [
          {
            "node": "Merge after create (rename)",
            "type": "main",
            "index": 0
          },
          {
            "node": "Create new file (rename)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update file content and commit": {
      "main": [
        [
          {
            "node": "Merge after update",
            "type": "main",
            "index": 1
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": null,
  "pinData": {},
  "versionId": "8c4dd01a-b3a2-4d15-b2df-1d5b31a8e8b0",
  "triggerCount": 0,
  "shared": [
    {
      "createdAt": "2025-09-06T09:36:22.339Z",
      "updatedAt": "2025-09-06T09:36:22.339Z",
      "role": "workflow:owner",
      "workflowId": "ZPne8T6KivBuF4hm",
      "projectId": "GfhaYhFYRk0TRXAf"
    }
  ],
  "tags": []
}